{
    "/uniUI/": {
        "title": "Welcome",
        "text": "Welcome! This is the documentation for the simple-to-use UI library for Roblox, called uniUI. This is a lightweight module, made for developer comfort, we have a Discord server, and a GitHub which gets checked regularly. Watch out! Even though I try to maintain this library and it's documentation as much as possible, it's not an guarantee that it will always be supported. If you are new to uniUI, we recommend to check out the installation guide down below. Quick start guide To follow this guide, you will need: A computer that supports Roblox Studio A Roblox account. Reasonable experience with the Roblox Studio Experience with Roblox If you don't have experience with Roblox Studio yet, there's plenty of starter guides to find on YouTube, or you can follow one of the built-in studio tutorials as well! Getting the source code Please get the source code from a trusted source to make sure you are using a genuine version of uniUI. GitHub To get the source code from GitHub, navigate to the  latest source code file  and click the \"Copy raw file\" button. You can now continue to the next step! Discord If you are in the Discord server, you can get your module by downloading the file from the source-code channel and then copying the file's contents onto your clipboard, you can do this by opening it in an executable like Notepad. Installing uniUI Now that you have the source code on your clipboard, you'll have to add it into your Roblox experience. uniUI is a module, as such it is supposed to be situated in a ModuleScript, you will have to create one and put the code you have from your clipboard in there. The ModuleScript can be situated anywhere, as long as it's accessible by the scripts you want it to use. Calling uniUI in a script Now that uniUI has been installed, you can call it in scripts as shown in the example below. Luau local  path  =  REPLACE_WITH_UNIUI_LOCATION  -- Specify the uniUI location. \n \n local  uniUI  =  require (path)  -- Call the module, it will initialize. Making your first UI After the installation has been finished, you can now use the module however you wish. Below is an example of how to create a simple  ScreenGui  and a  Frame . Luau -- This code assumes uniUI has been set and initialized in \"uniUI\" \n \n local  base  =  uniUI.base. new ( \"ScreenGui\" ,  game .Players.LocalPlayer.PlayerGui) \n -- This function creates a new UI \"base\" such as a ScreenGui. \n \n local  frame  =  uniUI.object. new ( \"Frame\" , base, {Size = UDim2. new ( 1 ,  0 ,  1 ,  0 )}) \n -- This function creates a new Frame. Happy coding! Making coding UI fun"
    },
    "/uniUI/documentation/howtoanimate/": {
        "title": "How to animate",
        "text": "How to animate A starters guide to animation, using simple examples! With uniUI, animation is simple and quick, just like this: Luau uniUI.animate.custom(object,  {BackgroundTransparency= 1 } ) This specific function sets the object to a custom property set, overriding a currently set \"state\", the function accepts the  object  and a  properties  list. Page in progress. This guide is on a lower priority than the  Functions & Submodules  chapter, as such, it will be finished after completion of that chapter. Making coding UI fun"
    },
    "/uniUI/documentation/animationproperties/": {
        "title": "Animation Properties",
        "text": "ap  - Animation Properties You'll come across this variable a lot in animation related functions. Useful page This page will be especially useful when starting out with uniUI! ap  stands for Animation Properties, which is a list describing how the animation should be run, this list explains uniUI exactly how to animate from one property state to another. Order of list Updates This complete list is only compatible with a future versions of uniUI, starting from 4.0Î“1. Attempting to use this list in a previous version will not crash anything though, it will just skip the ones not yet implemented. Number Description Variable type 1 Animation speed Number 2 Easing style Enum.EasingStyle.* 3 Easing direction Enum.EasingDirection.* 4 Repeat Number 5 Animation reverses Bool 6 Starting delay Number Leaving empty You do not have to define every animation properties list item, for example, if only setting a starting delay and an animation speed, you can use  {2, nil, nil, nil, nil, 2} . Empty values will always be set to defaults. Making coding UI fun"
    },
    "/uniUI/documentation/untweenableproperties/": {
        "title": "Untweenable Properties",
        "text": "utp  - Untweenable Properties utp , an abbreviation for Untweenable Properties, is a list of properties that should be instantly set at a state change or animation, skipping animation in it's entirity. The Untweenable Properties list can be used for any property regarding an UI object, regardless on it's compatibility with animation. However, some properties only work with Untweenable Properties, crashing the animation if ran in a regular properties file. More advanced features This feature is more advanced and as such this page's creation is not a high priority. Making coding UI fun"
    },
    "/uniUI/documentation/base/": {
        "title": "uniUI.base",
        "text": "uniUI.base This submodule submodule can be used for generating a \"base\" UI element such as a  ScreenGui ,  BillboardGui  or  SurfaceGui , UI objects such as Frame need a base to be visible. new() Modern function This function has been implemented in uniUI 4.0b4. Versions before 4.0b3 will not support this function. This function is used to generate a new UI. Example use Luau uniUI.base. new (basetype, parent, properties) Properties Property Expected Value Example basetype String \"ScreenGui\" parent Object PlayerGui properties Table {IgnoreGuiInset=true} Returns Returns Newly generated base. Making coding UI fun"
    },
    "/uniUI/documentation/object/": {
        "title": "uniUI.object",
        "text": "uniUI.object This submodule is responsible for the creation of UI objects such as  Frame  and  TextLabel , among many more! new() This function is used to generate new UI objects. A new state will automatically be set under the name \"DEFAULT\".  Example use Luau uniUI.object. new ( type , base, properties, untweenable_properties) Properties Property Expected Value Example type String \"Frame\" base Object - properties Table {BackgroundTransparency=1} utp Table {ZIndex=1} Returns Returns Newly generated object. import() Just about works This function just about works, and it's up for improvement in later versions in uniUI. This function is used to clone a UI module from a path and set it up to work with uniUI. Example use Luau uniUI.object. import (path, base) Properties Property Expected Value Example path Object ReplicatedStorage.Frame base Object - Returns Returns New cloned object. toggle_activation() Just about works This function just about works, and it's up for improvement in later versions in uniUI. Toggles the activation of an object and all of its descendants, activation determines whether or not Tweens can be executed on that object and its descendants. Useful for when using a closing animation. Example use Luau uniUI.object. toggle_activation (object, toggle) Properties Property Expected Value Example object Object - toggle Bool true Returns Returns nil Making coding UI fun"
    },
    "/uniUI/documentation/state/": {
        "title": "uniUI.state",
        "text": "uniUI.state This submodule can be used to save a specific state to an object, so that it can be recalled and used later.  States consist out of properties and untweenable properties. create() Creates a new state for an UI object, you can also choose to set the value by changing  set  to  true If  set  is  true , you can use animation properties(ap) to control the animation. Example use Luau uniUI.state. create (object, name, properties, utp, set, ap) Properties Property Expected Value Example object Object - name String \"State1\" properties Table {BackgroundTransparency=1} utp Table {ZIndex=1} set Bool true ap List {1} Returns Returns nil delete() Just about works This function just about works, and it's up for improvement in later versions in uniUI. Deletes a state set by  create  using a name. Example use Luau uniUI.state. delete (object, name) Properties Property Expected Value Example object Object - name String \"State1\" Returns Returns nil set() Sets the state of an object, using the name of the state set by create, and Animation Properties for defining the animation. Example use Luau uniUI.state. set (object, name, ap) Properties Property Expected Value Example object Object - name String \"State1\" ap List {1} Returns Returns nil Making coding UI fun"
    }
}